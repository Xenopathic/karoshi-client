#!/bin/sh -e
### BEGIN INIT INFO
# Provides:          Karoshi-update
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start karoshi-update
### END INIT INFO
#
# Karoshi Update
#
# This task pulls down new configuration files from a Karoshi server,
# to provide dynamic client updates.

if [ ! -f /opt/karoshi/clientsetup/variables ] || ! karoshi-manage-flags get domainset >/dev/null; then
	stop
	exit 0
fi
. /opt/karoshi/clientsetup/variables

#Disable sssd and LightDM
systemctl disable sssd >/dev/null 2>&1
systemctl disable lightdm >/dev/null 2>&1

#Clear home areas
echo "Clearing /home"
find /home -mindepth 1 -xdev -delete

#Make sure resolvconf is working
if [ -e /etc/resolv.conf ]
then
	rm -r /etc/resolv.conf
fi
ln -s /run/resolvconf/resolv.conf /etc/resolv.conf
resolvconf -u

echo
echo "########################################"
echo
echo Booting on `date`

#Wait for network device for 30 seconds
for i in `seq 1 300`; do
	if [ `cat /sys/class/net/$NETWORKINT/operstate` = 'up' ]; then
		break
	fi
	sleep 0.1
done

#Check if version has been set
if [ -z "$LINUX_VERSION" ]; then
	echo Linux version not set
	LINUX_VERSION=notset
fi

#Make sure that netlogon share is not connected
[ `mount | grep -c /tmp/netlogon` -gt 0 ] && umount /tmp/netlogon

if [ ! -d /tmp/netlogon ]; then
	echo Creating netlogon folder
	mkdir /tmp/netlogon
fi

#Connect to netlogon to update the startup scripts
echo Connecting to netlogon
set +e
mount_err=1

tries=1
while [ $mount_err -gt 0 ]
do
	for LSERVER in `dig $DNSSUFFIX +short`
	do
		mount.cifs //"$LSERVER"/netlogon /tmp/netlogon -o guest,sec=ntlm
		mount_err=$?
		if [ $mount_err -eq 0 ]
		then
			break
		fi
	done
	if [ $tries -eq 6 ] || [ $mount_err -eq 0 ]
	then
		break
	fi
	sleep 5
	tries=`expr "$tries" + 1`
done

set -e
if [ $mount_err -ne 0 ]; then
	echo Error connecting to netlogon - offline mode enabled
	karoshi-manage-flags set offline_mode
else
	karoshi-manage-flags unset offline_mode
fi

#Update scripts from the server
if ! karoshi-manage-flags get no_update_scripts >/dev/null; then
	if [ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/scripts/ ]; then
		find /tmp/netlogon/linuxclient/$LINUX_VERSION/scripts -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t /opt/karoshi/scripts
		find /opt/karoshi/scripts -mindepth 1 -print0 | xargs -r0 chmod 755
	fi
fi

#Run client config
[ -f /opt/karoshi/scripts/client-config ] && /opt/karoshi/scripts/client-config

#Run connect printers
[ -f /opt/karoshi/scripts/cups-config ] && /opt/karoshi/scripts/cups-config

#Disconnect from PDC
if [ $mount_err -eq 0 ]; then
	echo Disconnecting from netlogon
	umount /tmp/netlogon
fi

service sssd start
counter=0
while [ $(service sssd status | grep -c $DNSSUFFIX) = 0 ] && [ $counter -le 30 ]
do
	sleep 1
	let counter=$counter+1
done
service lightdm start

#Don't 'start' if running in offline mode
if karoshi-manage-flags get offline_mode >/dev/null; then
	stop
	exit 0
fi


