#!/bin/bash

#Copyright (C) 2013, 2014 Robin McCorkell

#This file is part of Karoshi Client.
#
#Karoshi Client is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Client is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Client.  If not, see <http://www.gnu.org/licenses/>.

#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

source /opt/karoshi/clientsetup/utilities/common
source /opt/karoshi/clientsetup/utilities/pam-common

config_exclude=(
	.
	..
	.mozilla
	.thunderbird
	.cache
	.thumbnails
	.Xauthority
	.ICEauthority
	.xsession-errors
	.pulse*
	.gvfs
	.dbus
	.VirtualBox
	.goutputstream-*
	.wine
	.wine*
	.local
	.steam
	.log
	.nv
)

function checkAndList {
	if [[ $1 ]] && [[ -e ~/$1 ]]; then
		list+=( "$1" )
	fi
}

function checkAndListConfig {
	for exclude in "${config_exclude[@]}"; do
		if [[ $1 == $exclude ]]; then
			return
		fi
	done
	checkAndList "$1"
}

#Detect an administrator
is_admin=false
groups=( $(id -nG) )
for group in "${groups[@]}"; do
	if [[ $group == "admin" ]] || [[ $group == "sudo" ]] || [[ $group == "tech" ]]; then
		echo "Detected admin user"
		is_admin=true
		break
	fi
done
if [[ $(id -nu) == "root" ]]; then
	is_admin=true
fi

#Detect a domain user
is_domain=false
if [[ $(id -u) -ge 1000 ]] && [[ $(id -u) -ne 65534 ]]; then
	echo "Detected domain user"
	is_domain=true
fi

#Detect offline home area
offline_home_exists=false
if $is_domain && [[ $(mount | grep "on $HOME/offline-home") ]]; then
	echo "Detected offline home area"
	offline_home_exists=true
fi

#Detect Firefox and Thunderbird profiles
if which firefox >/dev/null && [[ -d ~/.mozilla/firefox ]]; then
	firefox_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.mozilla/firefox/profiles.ini`
fi
if which thunderbird >/dev/null && [[ -d ~/.mozilla/thunderbird ]]; then
	thunderbird_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.mozilla/thunderbird/profiles.ini`
fi

#Remove Karoshi desktop icons
find ~/Desktop -mindepth 1 -maxdepth 1 -name 'karoshi-*.desktop' -delete

if $is_domain; then
	###################
	#Domain user
	###################

	if karoshi-manage-flags get offline_mode >/dev/null; then
		if $offline_home_exists; then
			echo "Using offline-home as alternate home"
			alternate_home="offline-home"
		fi
	else
		if [[ $(mount | grep "^[^ ]* on $HOME/network/home type cifs") ]]; then
			echo "Using network/home as alternate home"
			alternate_home="network/home"
		fi
		if $offline_home_exists; then
			echo "Setting offline home area to be removed"
			echo "delete" > "$KAROSHI_DATA"/"$KAROSHI_OFFLINE_HOMES"/flags/"$USER"
		fi
	fi

	#Clear Trash folder
	[[ -d ~/.local/share/Trash ]] && rm -rf ~/.local/share/Trash

	#Remove Karoshi autostart files
	find ~/.config/autostart -name 'karoshi-*.desktop' -delete

	#Backup configuration
	if [[ $alternate_home ]]; then
		mkdir -p ~/"$alternate_home"/.config
		#linux.tar.gz
		list=( )
		#Populate list with all hidden folders, with some exceptions
		for dir in ~/.*; do
			checkAndListConfig "${dir##~/}"
		done

		while read -d $'\0' -r file ; do
			checkAndList "${file##~/}"
		done < <(find ~/Desktop -mindepth 1 -maxdepth 1 -not -name "karoshi-*.desktop" -and -size -1024c -print0)

		[[ -f ~/$alternate_home/.config/linux.tar.gz ]] && rm -f ~/"$alternate_home"/.config/linux.tar.gz
		[[ "${list[@]}" ]] && tar -cz --one-file-system --exclude='karoshi-*.desktop' --exclude='*.karoshi-session' --exclude '.config/gtk-3.0/bookmarks' -C ~ -f ~/"$alternate_home"/.config/linux.tar.gz "${list[@]}"

		#all.tar.gz
		temp_dir=$(mktemp -d)
		[[ -f ~/$alternate_home/.config/all.tar.gz ]] && tar -x -C "$temp_dir" -f ~/"$alternate_home"/.config/all.tar.gz

		if [[ $thunderbird_profile ]]; then
			[[ -d $temp_dir/thunderbird/karoshi.profile ]] && rm -rf "$temp_dir"/thunderbird/karoshi.profile
			mkdir -p "$temp_dir"/thunderbird
			cp -rfT ~/.mozilla/thunderbird/"$thunderbird_profile" "$temp_dir"/thunderbird/karoshi.profile
		fi

		if [[ $firefox_profile ]]; then
			[[ -d $temp_dir/firefox/karoshi.profile ]] && rm -rf "$temp_dir"/firefox/karoshi.profile
			mkdir -p "$temp_dir"/firefox
			cp -rfT ~/.mozilla/firefox/"$firefox_profile" "$temp_dir"/firefox/karoshi.profile
		fi

		(
			cd "$temp_dir"
			tar -cz --one-file-system -f ~/"$alternate_home"/.config/all.tar.gz *
		)
		rm -rf "$temp_dir"

 		#DEPRECATED: Used for existing configurations
		[[ -f ~/$alternate_home/.configuration.tar.gz ]] && rm -f ~/"$alternate_home"/.configuration.tar.gz
		[[ -f ~/$alternate_home/.desktop-icons.tar.gz ]] && rm -f ~/"$alternate_home"/.desktop-icons.tar.gz
	fi
fi
