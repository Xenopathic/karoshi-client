#!/bin/bash

#Copyright (C) 2013, 2014 Robin McCorkell

#This file is part of Karoshi Client.
#
#Karoshi Client is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Client is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Client.  If not, see <http://www.gnu.org/licenses/>.

#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

source /opt/karoshi/clientsetup/utilities/common
source /opt/karoshi/clientsetup/utilities/pam-common

#Clear gtk bookmarks
[ ! ~/.config/gtk-3.0 ] && mdkir -p ~/.config/gtk-3.0
echo > ~/.config/gtk-3.0/bookmarks

#function create_entries
#	$1 is mount name
#	$2 is mount path
#	$3 is icon
function create_entries {
	filename=`tr '[:upper:] ' '[:lower:]-' <<< "$1"`
	command="thunar"
	iconname="$1"
	if [[ $sudo_open ]]; then
		command="lxqt-sudo thunar"
	fi
	echo "Generating desktop and menu entry: $1"
	#Desktop and Menu
	echo "[Desktop Entry]
Version=1.0
Type=Application
Terminal=false
Exec=$command $2
Name=$iconname
Icon=$3
Categories=X-XFCE;X-Xfce-Toplevel;Karoshi;
OnlyShowIn=XFCE;" | tee ~/Desktop/karoshi-"$filename".desktop > ~/.local/share/applications/karoshi-"$filename".desktop

#Create shortcut in Thunar side panel
if [[ "$command" = thunar ]]
then
	echo "file://$2" >> ~/.config/gtk-3.0/bookmarks
fi

}
#function create_link
#	$1 is name
#	$2 is location
#	$3 is icon
function create_link {
	name="$1"
	location="$2"
	icon="$3"
	filename=$(tr '[:upper:] ' '[:lower:]-' <<< "$name")
	echo "Generating desktop link: $name"
	cat << EOF > ~/Desktop/karoshi-"$filename".desktop
[Desktop Entry]
Version=1.0
Type=Link
Name=$name
Icon=$icon
URL=$location
EOF
}

#####################
#All users
#####################

#Detect an administrator
is_admin=false
groups=( $(id -nG) )
for group in "${groups[@]}"; do
	if [[ $group == "admin" ]] || [[ $group == "sudo" ]] || [[ $group == "tech" ]]; then
		echo "Detected admin user"
		is_admin=true
		break
	fi
done
if [[ $(id -nu) == "root" ]]; then
	is_admin=true
fi

#Detect a domain user
is_domain=false
if [[ $(id -u) -ge 1000 ]] && [[ $(id -u) -ne 65534 ]]; then
	echo "Detected domain user"
	is_domain=true
fi

#Detect offline home area
offline_home_exists=false
if $is_domain && [[ $(mount | grep "on $HOME/offline-home") ]]; then
	echo "Detected offline home area"
	offline_home_exists=true
fi

#Create required folders
[[ ! -d ~/Desktop ]] && mkdir ~/Desktop
[[ ! -d ~/.local/share/applications ]] && mkdir -p ~/.local/share/applications
[[ ! -d ~/.config/autostart ]] && mkdir -p ~/.config/autostart
[[ -d ~/network/home/.zotero ]] || mkdir -p ~/network/home/.zotero
[[ -d ~/.config/karoshi ]] || mkdir -p ~/.config/karoshi

#Clear Karoshi icons from desktop, menu and autostart
find ~/Desktop ~/.local/share/applications ~/.config/autostart -name 'karoshi-*.desktop' -delete

######################
#Domain/local users
######################

if $is_domain; then
	###############
	#Domain user
	###############

	offline_home_escape=$(sed 's/ /%20/g' <<< ~/offline-home)
	machineLang=$(dbus-send --print-reply --system --dest=org.freedesktop.locale1 /org/freedesktop/locale1 org.freedesktop.DBus.Properties.Get string:org.freedesktop.locale1 string:Locale | sed -n '/LANG=/s/.*LANG=\([^\.]*\)\..*/\1/p')
	machineLang=${machineLang:-en_US}
	#Delete references to offline-home in .gtk-bookmarks
	if [[ -f ~/.gtk-bookmarks ]] && grep -q "^file://$offline_home_escape " ~/.gtk-bookmarks && ! $offline_home_exists; then
		sed -i "\@^file://$offline_home_escape @ d" ~/.gtk-bookmarks
	fi

	if karoshi-manage-flags get offline_mode >/dev/null; then
		if $offline_home_exists; then
			alternate_home="offline-home"

			create_entries $"Home" "$HOME/offline-home" folder-home

			#Add shortcut to offline-home in .gtk-bookmarks
			if [[ -f ~/.gtk-bookmarks ]] && grep -q "^file://$offline_home_escape " ~/.gtk-bookmarks; then
				sed -i "s@^file://$offline_home_escape .*@file://$offline_home_escape "$"Home""@" ~/.gtk-bookmarks
			else
				echo "file://$offline_home_escape "$"Home" >> ~/.gtk-bookmarks
			fi
		else
			echo "WARNING: Unable to find offline home area" >&2
			create_entries $"Home" ~ folder-home
		fi
	else
		if $offline_home_exists; then
			echo "Found offline home area while online"
			create_entries $"Offline Home" ~/offline-home folder-home

			if [[ -f ~/.gtk-bookmarks ]] && grep -q "^file://$offline_home_escape " ~/.gtk-bookmarks; then
				sed -i "s@^file://$offline_home_escape .*@file://$offline_home_escape "$"Offline Home""@" ~/.gtk-bookmarks
			else
				echo "file://$offline_home_escape "$"Offline Home" >> ~/.gtk-bookmarks
			fi
		fi

		#Create home icon first so that it appears first on the desktop
		if [[ $(mount | grep "^[^ ]* on $HOME/network/home type cifs") ]]; then
			echo "Domain home area found"
			create_entries "home" "$HOME/network/home" folder-home
			server=$(mount | sed -n "s@^//\([^.]*\).$DNSSUFFIX/$USER on $HOME/network/home type cifs.*@\1@p")
			if [[ -f /opt/karoshi/user_web_servers ]] && grep -q "^$server\$" /opt/karoshi/user_web_servers &&
			  [[ -d ~/network/home/public_html ]] && getfacl ~/network/home/public_html | grep -q '^user:www-data:r-x$'; then
				create_link $"Web Hosting" "http://$server.$DNSSUFFIX/~$USER/" emblem-web
			fi

			alternate_home="network/home"
		else
			echo "No domain home area found"
			create_entries $"Home" ~ folder-home
		fi

		#Create icons to other mounted network shares
		for mountpath in `mount | grep "^[^ ]* on $HOME/network/[^ ]* type cifs" | cut -d' ' -f3 | sort`; do
			mountname=`basename $mountpath`
			if [[ $mountname != home ]]; then
				create_entries "$mountname" "$mountpath" folder-publicshare
			fi
		done
	fi

	#Add file manager entry to / if administrator
	if $is_admin; then
		sudo_open=true create_entries $"Admin File Manager" / system-file-manager
	fi

	#Copy in default icons
	if [[ -d /opt/karoshi/desktop-icons/all ]]; then
		find /opt/karoshi/desktop-icons/all -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t ~/Desktop
	fi

	#Copy in extra icons for groups
	pri_group=`id -gn`
	if [[ -d /opt/karoshi/desktop-icons/$pri_group ]]; then
		find /opt/karoshi/desktop-icons/$pri_group -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t ~/Desktop
	fi

	if [[ $alternate_home ]]; then
		#Create rednotebook link
		[[ -d ~/$alternate_home/rednotebook ]] || mkdir ~/"$alternate_home"/rednotebook
		[[ -d ~/.rednotebook ]] || ln -sT "$alternate_home"/rednotebook ~/.rednotebook

		#DEPRECATED: Used for existing configurations
		[[ -f ~/$alternate_home/.configuration.tar.gz ]] && tar -x -C ~ -f ~/"$alternate_home"/.configuration.tar.gz
		[[ -f ~/$alternate_home/.desktop-icons.tar.gz ]] && tar -x -C ~ -f ~/"$alternate_home"/.desktop-icons.tar.gz

		#Install configuration
		[[ -f ~/$alternate_home/.config/linux.tar.gz ]] && tar -x -C ~ -f ~/"$alternate_home"/.config/linux.tar.gz
		if [[ -f ~/$alternate_home/.config/all.tar.gz ]]; then
			#Files may be in here that need to be preserved but not handled
			temp_dir=$(mktemp -d)
			tar -x -C "$temp_dir" -f ~/"$alternate_home"/.config/all.tar.gz

			#Detect Firefox and Thunderbird profiles
			if which firefox >/dev/null && [[ -d ~/.mozilla/firefox ]]; then
				firefox_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.mozilla/firefox/profiles.ini`
			fi
			if which thunderbird >/dev/null && [[ -d ~/.mozilla/thunderbird ]]; then
				thunderbird_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.mozilla/thunderbird/profiles.ini`
			fi

			#DEPRECATED
			if [[ -f $temp_dir/firefox/places.sqlite ]] && [[ $firefox_profile ]]; then
				cp -ft ~/.mozilla/firefox/"$firefox_profile"/ "$temp_dir"/firefox/places.sqlite
			fi
			if [[ -f $temp_dir/thunderbird/places.sqlite ]] && [[ $thunderbird_profile ]]; then
				cp -ft ~/.mozilla/thunderbird/"$thunderbird_profile"/ "$temp_dir"/thunderbird/places.sqlite
			fi

			#New profiles
			if [[ -d $temp_dir/firefox/karoshi.profile ]]; then
				cp -rft ~/.mozilla/firefox/ "$temp_dir"/firefox/karoshi.profile
				cat > ~/.mozilla/firefox/profiles.ini <<- EOF
					[General]
					StartWithLastProfile=1

					[Profile0]
					Name=default
					IsRelative=1
					Path=karoshi.profile
				EOF
			fi
			if [[ -d $temp_dir/thunderbird/karoshi.profile ]]; then
				cp -rft ~/.mozilla/thunderbird/ "$temp_dir"/thunderbird/karoshi.profile
				cat > ~/.mozilla/thunderbird/profiles.ini <<- EOF
					[General]
					StartWithLastProfile=1

					[Profile0]
					Name=default
					IsRelative=1
					Path=karoshi.profile
				EOF
			fi

			rm -rf "$temp_dir"
		fi

		#Set default directory for terminal emulator and file manager to $alternate_home
		[[ -d ~/.config/xfce4/xfconf/xfce-perchannel-xml ]] || mkdir -p ~/.config/xfce4/xfconf/xfce-perchannel-xml
		cp -n /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml ~/.config/xfce4/xfconf/xfce-perchannel-xml
		sed -i 's@"exo-open --launch \(TerminalEmulator\|FileManager\)[^"]*"@"exo-open --launch \1 --working-directory '"'$alternate_home'"'"@' ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml

		cp -n /usr/share/applications/exo-terminal-emulator.desktop ~/.local/share/applications
		sed -i 's@^Exec=exo-open --launch TerminalEmulator.*@Exec=exo-open --launch TerminalEmulator --working-directory '"'$alternate_home'"'@' ~/.local/share/applications/exo-terminal-emulator.desktop
	fi

	#Clear any sessions
	[[ -e ~/.cache/sessions ]] && rm -rf ~/.cache/sessions
	mkdir -p ~/.cache/sessions

	#create user.js for default Firefox settings
	if which firefox >/dev/null && [[ -d ~/.mozilla/firefox ]]; then
		firefox_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.mozilla/firefox/profiles.ini`
		if [[ $firefox_profile ]] && [[ -d ~/.mozilla/firefox/$firefox_profile ]]; then
			echo "Found Firefox profile: $firefox_profile"
			#Apply CA certificate
			if [[ -f /opt/karoshi/cacert.pem ]]; then
				echo "Installing cacert.pem for Firefox"
				certutil -A -n "Karoshi CA" -addstore root -t "CTu,CTu,CTu" -i /opt/karoshi/cacert.pem -d ~/.mozilla/firefox/"$firefox_profile"
			fi

			#Default download directory
			if [[ $alternate_home ]]; then
				mkdir -p ~/"$alternate_home"/Downloads
				echo "user_pref('browser.download.lastDir', '~/$alternate_home/Downloads');" > ~/.mozilla/firefox/"$firefox_profile"/user.js
			fi

			#Add Zotero settings
			if [[ $alternate_home ]]; then
				echo "user_pref('extensions.zotero.dataDir', '~/$alternate_home/.zotero');
user_pref('extensions.zotero.useDataDir', true);" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
			fi
		fi
	fi

	#create user.js for default Thunderbird settings
	if which thunderbird >/dev/null && [[ -d ~/.mozilla/thunderbird ]]; then
		thunderbird_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.mozilla/thunderbird/profiles.ini`
		if [[ $thunderbird_profile ]] && [[ -d ~/.mozilla/thunderbird/$thunderbird_profile ]]; then
			echo "Found Thunderbird profile: $thunderbird_profile"
			#Apply CA certificate
			if [[ -f /opt/karoshi/cacert.pem ]]; then
				echo "Installing cacert.pem for Thunderbird"
				certutil -A -n "Karoshi CA" -addstore root -t "CTu,CTu,CTu" -i /opt/karoshi/cacert.pem -d ~/.mozilla/thunderbird/"$thunderbird_profile"
			fi

			if [[ $MAILSERVER ]]; then
				user_fullname=${GECOS%%,*}
				echo "Using $user_fullname as real name for user email"

				cat >> ~/.mozilla/thunderbird/"$thunderbird_profile"/user.js <<- EOF
					user_pref('mail.accountmanager.appendaccounts', 'karoshi_account');
					user_pref('mail.accountmanager.localfoldersserver', 'karoshi_server');
					user_pref('mail.account.karoshi_account.identities', 'karoshi_id');
					user_pref('mail.account.karoshi_account.server', 'karoshi_server');
					user_pref('mail.smtpservers', 'karoshi_smtp');

					user_pref('mail.identity.karoshi_id.useremail', '$USER@$DNSSUFFIX');
					user_pref('mail.identity.karoshi_id.valid', true);
					user_pref('mail.identity.karoshi_id.fullName', '$user_fullname');
					user_pref('mail.identity.karoshi_id.smtpServer', 'karoshi_smtp');
					user_pref('mail.identity.karoshi_id.archive_enabled', false);
					user_pref('mail.identity.karoshi_id.draft_folder', 'imap://$USER@mail.$DNSSUFFIX/Drafts');
					user_pref('mail.identity.karoshi_id.drafts_folder_picker_mode', '0');
					user_pref('mail.identity.karoshi_id.fcc_folder', 'imap://$USER@mail.$DNSSUFFIX/Sent');
					user_pref('mail.identity.karoshi_id.fcc_folder_picker_mode', '0');
					user_pref('mail.identity.karoshi_id.stationery_folder', 'imap://$USER@mail.$DNSSUFFIX/Templates');
					user_pref('mail.identity.karoshi_id.tmpl_folder_picker_mode', '0');
					user_pref('mail.identity.karoshi_id.reply_on_top', 1);
					user_pref('mail.identity.karoshi_id.sig_bottom', false);

					user_pref('mail.server.karoshi_server.authMethod', 5);
					user_pref('mail.server.karoshi_server.check_new_mail', true);
					user_pref('mail.server.karoshi_server.hostname', 'mail.$DNSSUFFIX');
					user_pref('mail.server.karoshi_server.login_at_startup', true);
					user_pref('mail.server.karoshi_server.name', '$USER@$DNSSUFFIX');
					user_pref('mail.server.karoshi_server.socketType', 2);
					user_pref('mail.server.karoshi_server.storeContractID', '@mozilla.org/msgstore/berkeleystore;1');
					user_pref('mail.server.karoshi_server.type', 'imap');
					user_pref('mail.server.karoshi_server.userName', '$USER');
					user_pref('mail.server.karoshi_server.using_subscription', false);
					user_pref('mail.server.karoshi_server.offline_download', false);

					user_pref('mail.smtpserver.karoshi_smtp.authMethod', 5);
					user_pref('mail.smtpserver.karoshi_smtp.hostname', 'mail.$DNSSUFFIX');
					user_pref('mail.smtpserver.karoshi_smtp.port', 25);
					user_pref('mail.smtpserver.karoshi_smtp.try_ssl', 2);
					user_pref('mail.smtpserver.karoshi_smtp.username', '$USER');
				EOF
			fi
		fi
	fi

	#Disable Firefox crash reporter
	export MOZ_CRASHREPORTER_DISABLE=1

	if karoshi-manage-flags get offline_mode >/dev/null; then
		if $offline_home_exists && [[ ! -e ~/.config/karoshi/offline-home-seen ]]; then
			if [[ -e /opt/karoshi/clientsetup/config/offline-homes/new-offline-user.desktop ]]; then
				cp -f /opt/karoshi/clientsetup/config/offline-homes/new-offline-user.desktop ~/.config/autostart/karoshi-new-offline-user.desktop
			fi
			touch ~/.config/karoshi/offline-home-seen
		fi
	else
		if $offline_home_exists; then
			if [[ -e /opt/karoshi/clientsetup/config/offline-homes/online-merge.desktop ]]; then
				cp -f /opt/karoshi/clientsetup/config/offline-homes/online-merge.desktop ~/.config/autostart/karoshi-online-merge.desktop
			fi
			[[ -e ~/.config/karoshi/offline-home-seen ]] && rm -f ~/.config/karoshi/offline-home-seen
		fi
	fi
else
	###############
	#Local user
	###############
	create_entries $"Home" ~ folder-home

	#Add file manager entry to / if administrator
	if $is_admin; then
		sudo_open=true create_entries $"Admin File Manager" / system-file-manager
	fi
fi

#Copy in admin-skel
if $is_admin && [[ -d /opt/karoshi/admin-skel ]]; then
	echo "Copying admin-skel into home area"
	find /opt/karoshi/admin-skel -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t ~
fi
if ! $is_admin && karoshi-manage-flags get offline_mode >/dev/null && $is_domain && [[ -e /opt/karoshi/admin-skel/.config ]] ; then
	echo "Copying admin-skel configuration into home area for offline mode"
	cp -rf /opt/karoshi/admin-skel/.config ~
fi

#Set permissions on icons
find ~/Desktop -name '*.desktop' -print0 | xargs -r0 chmod 0700
