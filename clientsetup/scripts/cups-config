#!/bin/bash

#Copyright (C) 2013 Robin McCorkell

#This file is part of Karoshi Client.
#
#Karoshi Client is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Client is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Client.  If not, see <http://www.gnu.org/licenses/>.

#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

source /opt/karoshi/clientsetup/utilities/common

############################
#Printers
############################
if ! karoshi-manage-flags get no_update_printers >/dev/null; then
	echo "Configuring printer configuration files"
	[[ -d /var/lib/karoshi/printing ]] || mkdir /var/lib/karoshi/printing
	find /var/lib/karoshi/printing -mindepth 1 -delete
	#Copy printer configuration
	if [[ -f /tmp/netlogon/printers.txt ]]; then
		if [[ -z "$LOCATION" ]] || [[ "$LOCATION" = default ]]; then
			all_printers=$(grep -v ^"*" /tmp/netlogon/printers.txt | grep -v ^- | cut -d, -f3- | sed 's/,/\n/g' | sed '/^$/d' | sort --unique)
			for printer in $all_printers
			do
				echo "Marking printer $printer to be configured"
				echo $printer >> /var/lib/karoshi/printing/list
				#Copy PPD
				[[ -f /tmp/netlogon/linuxclient/printer_drivers/$printer.ppd ]] && cp -f /tmp/netlogon/linuxclient/printer_drivers/$printer.ppd /var/lib/karoshi/printing/$printer.ppd

			done
		elif [[ "$LOCATION" ]]; then
			all_printers=$(grep ^"$LOCATION", /tmp/netlogon/printers.txt)
			if [[ "$all_printers" ]]; then
				printer_count=`cut -d, -f2 <<< "$all_printers"`
				default_printer=`cut -d, -f$(( printer_count + 3 )) <<< "$all_printers"`
				echo $default_printer > /var/lib/karoshi/printing/list
				for (( i = 3; i < printer_count + 3; ++i )); do
					printer=`cut -d, -f$i <<< "$all_printers"`
					echo "Marking printer $printer to be configured"
					if [[ $printer != $default_printer ]]; then
						echo $printer >> /var/lib/karoshi/printing/list
					fi
					#Copy PPD
					[[ -f /tmp/netlogon/linuxclient/printer_drivers/$printer.ppd ]] && cp -f /tmp/netlogon/linuxclient/printer_drivers/$printer.ppd /var/lib/karoshi/printing/$printer.ppd
				done
			fi
		fi
	fi
	#Copy savapage PPD
	[[ -f /tmp/netlogon/linuxclient/printer_drivers/savapage.ppd ]] && cp -f /tmp/netlogon/linuxclient/printer_drivers/savapage.ppd /var/lib/karoshi/printing/savapage.ppd
fi

#Turn off cups browsing
if [[ `grep -c "Browsing Off" /etc/cups/cupsd.conf` -eq 0 ]]
then
	cat >> /etc/cups/cupsd.conf << EOF
Browsing Off
BrowseInterval 0
EOF
fi

#Remove all network printers
while read -r printer _; do
	if [[ `lpstat -v $printer | grep 'smb:\|ipp:'` ]]; then
		echo "Removing $printer"
		lpadmin -x $printer
	fi
done < <(lpstat -a)

#Assign printers depending on the location
if [[ $LOCATION ]] && [[ $PRINTSERVER ]] && [[ -f /var/lib/karoshi/printing/list ]]; then
	printerList=$(< /var/lib/karoshi/printing/list)
	if [[ $printerList ]]; then
		read -r defaultPrinter _ <<< "$printerList"
		while read -r printer _; do
			echo "Adding printer $printer"
			lpadmin -p $printer -v ksmb://$PRINTSERVER.$DNSSUFFIX/$printer -L "$LOCATION" -D "$printer" -E
			#Copy PPD
			[[ -f /var/lib/karoshi/printing/$printer.ppd ]] && lpadmin -p $printer -P /var/lib/karoshi/printing/$printer.ppd
		done <<< "$printerList"
		lpadmin -d $defaultPrinter
	fi
fi

#Add savapage printing if we have the driver
if [[ -f /var/lib/karoshi/printing/savapage.ppd ]]; then
	lpadmin -p savapage -v ipps://$PRINTSERVER.$DNSSUFFIX:8632/printers -L "Follow Me" -D "savapage" -E
	lpadmin -p savapage -P /var/lib/karoshi/printing/savapage.ppd
fi

#Permit administrative access to CUPS if offline
if karoshi-manage-flags get offline_mode >/dev/null; then
	echo "Unlocking CUPS for offline mode"
	[[ -f /etc/cups/cupsd.conf ]] && sed -i 's/^DefaultPolicy .*/DefaultPolicy offline/' /etc/cups/cupsd.conf
else
	[[ -f /etc/cups/cupsd.conf ]] && sed -i 's/^DefaultPolicy .*/DefaultPolicy default/' /etc/cups/cupsd.conf
fi

#Fix any outdated PPD files
cups-genppdupdate
service cups restart
exit 0
